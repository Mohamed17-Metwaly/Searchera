// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using Microsoft.VisualStudio.Web.CodeGenerators.Mvc.Templates.BlazorIdentity.Pages.Manage;

namespace Searchera.Models;

public partial class Company
{
    public int Id { get; set; }
    [Required(ErrorMessage ="The Name Is Required!")]
    [MaxLength(100,ErrorMessage ="Max Length is 100!")]
    [MinLength(3,ErrorMessage ="Min Length is 3!")]
    public string Name { get; set; }
    [Required(ErrorMessage ="The Discription is Requierd!")]
    [MaxLength(100, ErrorMessage = "Max Length is 100!")]
    [MinLength(3, ErrorMessage = "Min Length is 3!")]
    public string Discription { get; set; }
    [Required(ErrorMessage ="The Website is Requierd!")]
    public string Wepsite { get; set; }

    public string Logo { get; set; }
    [NotMapped]
    public IFormFile LogoProfile { get; set; }

    [Required(ErrorMessage ="The Industry is Required!")]
    [MaxLength(100, ErrorMessage = "Max Length is 100!")]
    [MinLength(3, ErrorMessage = "Min Length is 3!")]
    public string Industry { get; set; }
    [Required(ErrorMessage ="The Locations is Requierd!")]
    [MaxLength(200, ErrorMessage = "Max Length is 100!")]
    [MinLength(3, ErrorMessage = "Min Length is 3!")]
    public string Locations { get; set; }
    [DataType(DataType.DateTime)]
    public DateTime CreatedAt { get; set; }
    [ForeignKey("User")]
    [Required(ErrorMessage = "The User is Requierd!")]
    public int? UserId { get; set; }
    [Required(ErrorMessage ="The Email is Requierd!")]
    [EmailAddress(ErrorMessage ="Enter The Correct Email!")]
    public string Email { get; set; }
    [Required(ErrorMessage ="The Password is Requierd!")]
    [DataType(DataType.Password,ErrorMessage ="Enter The Correct Password")]
    public string Password { get; set; }

    public virtual ICollection<JobListing>? JobListings { get; set; } = new List<JobListing>();

    public virtual ICollection<Review>? Reviews { get; set; } = new List<Review>();

    public virtual User? User { get; set; }
}